# -*- ruby -*-

$timestamp_regex = /^(\d+)[h:](\d+)$/

def minutes_to_human_readable nb_minutes
  hours = nb_minutes / 60
  minutes = nb_minutes % 60
  str = ""
  if hours > 0
    str += sprintf "%dh", hours
  end
  if minutes > 0
    str += sprintf "%02dm", minutes
  end
  str
end
# Examples:
minutes_to_human_readable(120) == "2h" or raise
minutes_to_human_readable(15) == "15m" or raise
minutes_to_human_readable(65) == "1h05m" or raise

class Timestamp
  def initialize(line)
    # @ts_line is the line of the timestamp itself.
    @ts_line = line

    # @lines represent the lines that follow this timestamp until the
    # next timestamp.
    @lines = []
  end

  def lines
    @lines
  end

  def time
    res = $timestamp_regex.match @ts_line
    res != nil or raise
    res[1].to_i * 60 + res[2].to_i
  end
end
# Example:
Timestamp.new("08h03").time == 8*60+3 or raise

class Line
  def initialize(line)
    @line = line
  end

  def to_s
    @line
  end

  def timestamp?
    $timestamp_regex =~ @line
  end

  def to_timestamp
    Timestamp.new @line
  end

  def date?
    /^\d\d\d\d-\d\d-\d\d/ =~ @line
  end
end
# Examples:
if Line.new("hello\n").timestamp?
  raise
end
Line.new("04h05\n").timestamp? or raise
Line.new("04h05\n").to_timestamp.time == 4*60+5 or raise

class Interval
  # start and stop are Timestamp objects.
  def initialize(start, stop)
    @start = start
    @stop = stop
    @lines = start.lines
  end

  def time
    @stop.time - @start.time
  end

  # This is read-write.
  def lines
    @lines
  end

  def topic_line
    index = @lines.find_index { |line| /^\s*\+/ =~ line.to_s }
    if index == nil
      return nil
    end
    @lines[index]
  end

  def topic_name
    if topic_line == nil
      return "pause"
    else
      match = /(?:^|\s+)\+(\S+)/.match topic_line.to_s
      if match == nil
        raise
      end
      return match[1]
    end
  end
end

class Topic
  def initialize name
    @name = name
    @intervals = []
  end

  def intervals
    @intervals
  end

  def time
    accu_time = 0
    @intervals.each { |iv| accu_time += iv.time }
    accu_time
  end

  def lines
    lines = []
    @intervals.each do |iv|
      lines += iv.lines
    end
    lines
  end

  def name
    @name
  end

  def to_s
    "#{@name}" + lines.join("\\\\")
  end
end

class TimeCompiler
  def main(lines)
    # Read all lines and fold them into Timestamp objects added to the "timestamps" list.
    timestamps = []
    lines.each do |line_str|
      line = Line.new(line_str)
      if line.timestamp?
        timestamps << line.to_timestamp
      else
        timestamps.last.lines << line
      end
    end

    # Create one Interval for each pair of Timestamp; store into the "intervals" list.
    intervals = []
    timestamps_last_index = timestamps.length - 1
    timestamps.each_index do |i|
      next if i == timestamps_last_index
      intervals << Interval.new(timestamps[i], timestamps[i+1])
    end

    # Create and fill Topics into the "topics" hash.
    topics = Hash.new

    intervals.each do |iv|
      topic_name = iv.topic_name
      unless topics.has_key? topic_name
        topics[topic_name] = Topic.new topic_name
      end
      topics[topic_name].intervals << iv
    end

    pause =
      if topics.has_key? "pause"
        p = topics["pause"]
        topics.delete("pause")
        p
      else
        nil
      end

    total = 0
    topics.each_value do |cat|
      total += cat.time
    end

    topics.each_value do |cat|
      percent = sprintf "%.0f%%", (100 * cat.time / total)
      puts "#{cat.name}: #{minutes_to_human_readable cat.time} #{percent}"
      cat.lines.each do |line|
        puts "  #{line}"
      end
    end

    puts "total: #{minutes_to_human_readable total}"
    
    if pause
      puts "#{pause.name}: #{minutes_to_human_readable pause.time}"
    end
  end
end

class TimeCompilerForTest < TimeCompiler
  def initialize
    @out = []
  end

  def puts str
    @out << str
  end

  def out
    @out
  end
end

begin
  tc = TimeCompilerForTest.new
  tc.main []
end

TimeCompiler.new.main $stdin.each
